<?php
/**
 * @file
 *  Drupal State module (un)installation
 */

/**
 * Implements hook_install().
 */
function state_install() {
  // For hashing session id to non-httponly cookie.
  variable_set('state__salt', hash('sha256', uniqid(mt_rand(), TRUE)));

  // Make the module available early, to allow other modules to use it
  // during hook_init().
  db_update('system')
    // Module Inspect is -1000.
    ->fields(array('weight' => -999))
    ->condition('type', 'module')
    ->condition('name', 'state')
    ->execute();
}

/**
 * Deletes configuration variables.
 *
 * Implements hook_uninstall().
 */
function state_uninstall() {
  variable_del('state__salt');
  // Use frontend session management.
  variable_del('state__frntnd');
  // Enforce session timeout for logged in users.
  variable_del('state__nfrclgt');
  // Override session.gc_maxlifetime.
  variable_del('state__srvrlife');
  // User-activity conditioned prolongation roles.
  variable_del('state__prlngcnd');
  // Unconditional prolongation roles.
  variable_del('state__prlnguncnd');
  // Non-prolongation check.
  variable_del('state__chcksss');
  // Auto redirect on session/form expiration.
  variable_del('state__autrdr');
  // On session/form expiration, redirect to.
  variable_del('state__rdrtrg');
  // Override English.
  variable_del('state__enovrrd');
  // Count requests.
  variable_del('state__cntreqs');
  // Non-page paths.
  variable_del('state__nonpages');
  // Don't set message on log-out due to session timeout.
  variable_del('state__sssoutmsomit');
}

/**
 * Deletes and renames various module settings.
 */
function state_update_7001() {
  // Not used anymore.
  db_delete('variable')->condition('name', 'module_state_frntndsttngs')->execute();

  // Renamed.
  $old_new = array(
    'module_state_salt' => 'state__salt',
    'module_state_frntnd' => 'state__frntnd',
    'module_state_enovrrd' => 'state__enovrrd',
    'module_state_cntreqs' => 'state__cntreqs',
    'module_state_nonpages' => 'state__nonpages',
  );
  foreach ($old_new as $old => $new) {
    if (!db_select('variable', 'v')->fields('v')->condition('v.name', $new)->execute()->fetch()) {
      db_update('variable')->fields(array('name' => $new))->condition('name', $old)->execute();
    }
    else {
      db_delete('variable')->condition('name', $old)->execute();
    }
  }
}

/**
 * Sets module weight to -999 to make it available for most other modules
 * during hook_init().
 *
 * Version 7.x-1.3.
 */
function state_update_7002() {
  db_update('system')
    // Module Inspect is -1000.
    ->fields(array('weight' => -999))
    ->condition('type', 'module')
    ->condition('name', 'state')
    ->execute();
}